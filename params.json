{"name":"Docker Redmine","tagline":"A Dockerfile that installs redmine, apache-mpm-event + mod_proxy_html","body":"# Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n  - [Version](#version)\r\n  - [Changelog](Changelog.md)\r\n- [Reporting Issues](#reporting-issues)\r\n- [Installation](#installation)\r\n- [Quick Start](#quick-start)\r\n- [Configuration](#configuration)\r\n  - [Data Store](#data-store)\r\n  - [Database](#database)\r\n    - [MySQL](#mysql)\r\n      - [Internal MySQL Server](#internal-mysql-server)\r\n      - [External MySQL Server](#external-mysql-server)\r\n      - [Linking to MySQL Container](#linking-to-mysql-container)\r\n    - [PostgreSQL](#postgresql)\r\n      - [External PostgreSQL Server](#external-postgresql-server)\r\n      - [Linking to PostgreSQL Container](#linking-to-postgresql-container)\r\n  - [Memcached (Optional)](#memcached-optional)\r\n      - [External Memcached Server](#external-memcached-server)\r\n      - [Linking to Memcached Container](#linking-to-memcached-container)\r\n  - [Mail](#mail)\r\n  - [SSL](#ssl)\r\n    - [Generation of Self Signed Certificates](#generation-of-self-signed-certificates)\r\n    - [Strengthening the server security](#strengthening-the-server-security)\r\n    - [Installation of the Certificates](#installation-of-the-certificates)\r\n    - [Enabling HTTPS support](#enabling-https-support)\r\n    - [Using HTTPS with a load balancer](#using-https-with-a-load-balancer)\r\n  - [Deploy to a subdirectory (relative url root)](#deploy-to-a-subdirectory-relative-url-root)\r\n  - [Putting it all together](#putting-it-all-together)\r\n  - [Available Configuration Parameters](#available-configuration-parameters)\r\n- [Plugins](#plugins)\r\n  - [Installing Plugins](#installing-plugins)\r\n  - [Uninstalling Plugins](#uninstalling-plugins)\r\n- [Themes](#plugins)\r\n  - [Installing Themes](#installing-themes)\r\n  - [Uninstalling Themes](#uninstalling-themes)\r\n- [Shell Access](#shell-access)\r\n- [Upgrading](#upgrading)\r\n- [Rake Tasks](#rake-tasks)\r\n- [References](#references)\r\n\r\n# Introduction\r\n\r\nDockerfile to build a Redmine container image.\r\n\r\n## Version\r\n\r\nCurrent Version: **2.5.2-2**\r\n\r\n# Reporting Issues\r\n\r\nDocker is a relatively new project and is active being developed and tested by a thriving community of developers and testers and every release of docker features many enhancements and bugfixes.\r\n\r\nGiven the nature of the development and release cycle it is very important that you have the latest version of docker installed because any issue that you encounter might have already been fixed with a newer docker release.\r\n\r\nFor ubuntu users I suggest [installing docker](https://docs.docker.com/installation/ubuntulinux/) using docker's own package repository since the version of docker packaged in the ubuntu repositories are a little dated.\r\n\r\nHere is the shortform of the installation of an updated version of docker on ubuntu.\r\n\r\n```bash\r\nsudo apt-get purge docker.io\r\ncurl -s https://get.docker.io/ubuntu/ | sudo sh\r\nsudo apt-get update\r\nsudo apt-get install lxc-docker\r\n```\r\n\r\nFedora and RHEL/CentOS users should try disabling selinux with `setenforce 0` and check if resolves the issue. If it does than there is not much that I can help you with. You can either stick with selinux disabled (not recommended by redhat) or switch to using ubuntu.\r\n\r\nIf using the latest docker version and/or disabling selinux does not fix the issue then please file a issue request on the [issues](https://github.com/dockerimages/docker-redmine/issues) page.\r\n\r\nIn your issue report please make sure you provide the following information:\r\n\r\n- The host ditribution and release version.\r\n- Output of the `docker version` command\r\n- Output of the `docker info` command\r\n- The `docker run` command you used to run the image (mask out the sensitive bits).\r\n\r\n# Installation\r\n\r\nPull the image from the docker index. This is the recommended method of installation as it is easier to update image in the future. These builds are performed by the Trusted Build service.\r\n\r\n```bash\r\ndocker pull dockerimages/redmine:latest\r\n```\r\n\r\nSince version `2.4.2`, the image builds are being tagged. You can now pull a particular version of redmine by specifying the version number. For example,\r\n\r\n```bash\r\ndocker pull dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nAlternately you can build the image yourself.\r\n\r\n```bash\r\ngit clone https://github.com/dockerimages/docker-redmine.git\r\ncd docker-redmine\r\ndocker build --tag=\"$USER/redmine\" .\r\n```\r\n\r\n# Quick Start\r\n\r\nRun the redmine image with the name \"redmine\".\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm -p 10080:80 \\\r\ndockerimages/redmine:2.5.2-2\r\n```\r\n\r\n**NOTE**: Please allow a minute or two for the Redmine application to start.\r\n\r\nPoint your browser to `http://localhost:10080` and login using the default username and password:\r\n\r\n* username: **admin**\r\n* password: **admin**\r\n\r\nYou should now have the Redmine application up and ready for testing. If you want to use this image in production the please read on.\r\n\r\n# Configuration\r\n\r\n## Data Store\r\n\r\nFor the file storage we need to mount a volume at the following location.\r\n\r\n* `/home/redmine/data`\r\n\r\n> **NOTE**\r\n>\r\n> Existing users **need to move** the existing files directory inside `/opt/redmine/data/`.\r\n>\r\n> ```bash\r\n> mkdir -p /opt/redmine/data\r\n> mv /opt/redmine/files /opt/redmine/data\r\n> ```\r\n\r\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\r\n\r\n```bash\r\nmkdir -p /opt/redmine/data\r\nsudo chcon -Rt svirt_sandbox_file_t /opt/redmine/data\r\n```\r\n\r\nVolumes can be mounted in docker by specifying the **'-v'** option in the docker run command.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -v /opt/redmine/data:/home/redmine/data dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n## Database\r\n\r\nRedmine uses a database backend to store its data.\r\n\r\n### MySQL\r\n\r\n#### Internal MySQL Server\r\n\r\n> **Warning**\r\n>\r\n> The internal mysql server will soon be removed from the image.\r\n\r\n> Please use a linked [mysql](#linking-to-mysql-container) or\r\n> [postgresql](#linking-to-postgresql-container) container instead.\r\n> Or else connect with an external [mysql](#external-mysql-server) or\r\n> [postgresql](#external-postgresql-server) server.\r\n\r\n> You've been warned.\r\n\r\nThis docker image is configured to use a MySQL database backend. The database connection can be configured using environment variables. If not specified, the image will start a mysql server internally and use it. However in this case, the data stored in the mysql database will be lost if the container is stopped/deleted. To avoid this you should mount a volume at `/var/lib/mysql`.\r\n\r\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\r\n\r\n```bash\r\nmkdir -p /opt/redmine/mysql\r\nsudo chcon -Rt svirt_sandbox_file_t /opt/redmine/mysql\r\n```\r\n\r\nThe updated run command looks like this.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  -v /opt/redmine/mysql:/var/lib/mysql dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nThis will make sure that the data stored in the database is not lost when the image is stopped and started again.\r\n\r\n#### External MySQL Server\r\n\r\nThe image can be configured to use an external MySQL database instead of starting a MySQL server internally. The database configuration should be specified using environment variables while starting the Redmine image.\r\n\r\nBefore you start the Redmine image create user and database for redmine.\r\n\r\n```sql\r\nmysql -uroot -p\r\nCREATE USER 'redmine'@'%.%.%.%' IDENTIFIED BY 'password';\r\nCREATE DATABASE IF NOT EXISTS `redmine_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;\r\nGRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `redmine_production`.* TO 'redmine'@'%.%.%.%';\r\n```\r\n\r\nWe are now ready to start the redmine application.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=redmine_production\" \\\r\n  -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -v /opt/redmine/data:/home/redmine/data dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nThis will initialize the redmine database and after a couple of minutes your redmine instance should be ready to use.\r\n\r\n#### Linking to MySQL Container\r\n\r\nYou can link this image with a mysql container for the database requirements. The alias of the mysql server container should be set to **mysql** while linking with the redmine image.\r\n\r\nIf a mysql container is linked, only the `DB_TYPE`, `DB_HOST` and `DB_PORT` settings are automatically retrieved using the linkage. You may still need to set other database connection parameters such as the `DB_NAME`, `DB_USER`, `DB_PASS` and so on.\r\n\r\nTo illustrate linking with a mysql container, we will use the [dockerimages/mysql](https://github.com/dockerimages/docker-mysql) image. When using docker-mysql in production you should mount a volume for the mysql data store. Please refer the [README](https://github.com/dockerimages/docker-mysql/blob/master/README.md) of docker-mysql for details.\r\n\r\nFirst, lets pull the mysql image from the docker index.\r\n\r\n```bash\r\ndocker pull dockerimages/mysql:latest\r\n```\r\n\r\nFor data persistence lets create a store for the mysql and start the container.\r\n\r\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\r\n\r\n```bash\r\nmkdir -p /opt/mysql/data\r\nsudo chcon -Rt svirt_sandbox_file_t /opt/mysql/data\r\n```\r\n\r\nThe updated run command looks like this.\r\n\r\n```bash\r\ndocker run --name mysql -it --rm \\\r\n  -v /opt/mysql/data:/var/lib/mysql \\\r\n  dockerimages/mysql:latest\r\n```\r\n\r\nYou should now have the mysql server running. By default the dockerimages/mysql image does not assign a password for the root user and allows remote connections for the root user from the `172.17.%.%` address space. This means you can login to the mysql server from the host as the root user.\r\n\r\nNow, lets login to the mysql server and create a user and database for the redmine application.\r\n\r\n```bash\r\ndocker run -it --rm dockerimages/mysql:latest mysql -uroot -h$(docker inspect --format {{.NetworkSettings.IPAddress}} mysql)\r\n```\r\n\r\n```sql\r\nCREATE USER 'redmine'@'172.17.%.%' IDENTIFIED BY 'password';\r\nCREATE DATABASE IF NOT EXISTS `redmine_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;\r\nGRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `redmine_production`.* TO 'redmine'@'172.17.%.%';\r\nFLUSH PRIVILEGES;\r\n```\r\n\r\nWe are now ready to start the redmine application.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm --link mysql:mysql \\\r\n  -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -e \"DB_NAME=redmine_production\" \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n### PostgreSQL\r\n\r\n#### External PostgreSQL Server\r\n\r\nThe image also supports using an external PostgreSQL Server. This is also controlled via environment variables.\r\n\r\n```sql\r\nCREATE ROLE redmine with LOGIN CREATEDB PASSWORD 'password';\r\nCREATE DATABASE redmine_production;\r\nGRANT ALL PRIVILEGES ON DATABASE redmine_production to redmine;\r\n```\r\n\r\nWe are now ready to start the redmine application.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -e \"DB_TYPE=postgres\" -e \"DB_HOST=192.168.1.100\" \\\r\n  -e \"DB_NAME=redmine_production\" -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nThis will initialize the redmine database and after a couple of minutes your redmine instance should be ready to use.\r\n\r\n#### Linking to PostgreSQL Container\r\n\r\nYou can link this image with a postgresql container for the database requirements. The alias of the postgresql server container should be set to **postgresql** while linking with the redmine image.\r\n\r\nIf a postgresql container is linked, only the `DB_TYPE`, `DB_HOST` and `DB_PORT` settings are automatically retrieved using the linkage. You may still need to set other database connection parameters such as the `DB_NAME`, `DB_USER`, `DB_PASS` and so on.\r\n\r\nTo illustrate linking with a postgresql container, we will use the [dockerimages/postgresql](https://github.com/dockerimages/docker-postgresql) image. When using postgresql image in production you should mount a volume for the postgresql data store. Please refer the [README](https://github.com/dockerimages/docker-postgresql/blob/master/README.md) of docker-postgresql for details.\r\n\r\nFirst, lets pull the postgresql image from the docker index.\r\n\r\n```bash\r\ndocker pull dockerimages/postgresql:latest\r\n```\r\n\r\nFor data persistence lets create a store for the postgresql and start the container.\r\n\r\nSELinux users are also required to change the security context of the mount point so that it plays nicely with selinux.\r\n\r\n```bash\r\nmkdir -p /opt/postgresql/data\r\nsudo chcon -Rt svirt_sandbox_file_t /opt/postgresql/data\r\n```\r\n\r\nThe updated run command looks like this.\r\n\r\n```bash\r\ndocker run --name postgresql -it --rm \\\r\n  -v /opt/postgresql/data:/var/lib/postgresql \\\r\n  dockerimages/postgresql:latest\r\n```\r\n\r\nYou should now have the postgresql server running. The password for the postgres user can be found in the logs of the postgresql image.\r\n\r\n```bash\r\ndocker logs postgresql\r\n```\r\n\r\nNow, lets login to the postgresql server and create a user and database for the redmine application.\r\n\r\n```bash\r\ndocker run -it --rm dockerimages/postgresql:latest psql -U postgres -h $(docker inspect --format {{.NetworkSettings.IPAddress}} postgresql)\r\n```\r\n\r\n```sql\r\nCREATE ROLE redmine with LOGIN CREATEDB PASSWORD 'password';\r\nCREATE DATABASE redmine_production;\r\nGRANT ALL PRIVILEGES ON DATABASE redmine_production to redmine;\r\n```\r\n\r\nWe are now ready to start the redmine application.\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm --link postgresql:postgresql \\\r\n  -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -e \"DB_NAME=redmine_production\" \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n## Memcached (Optional)\r\n\r\nThis image can (optionally) be configured to use a memcached server to speed up Redmine. This is particularly useful when you have a large number users.\r\n\r\n### External Memcached Server\r\n\r\nThe image can be configured to use an external memcached server. The memcached server host and port configuration should be specified using environment variables `MEMCACHE_HOST` and `MEMCACHE_PORT` like so:\r\n\r\n*Assuming that the memcached server host is 192.168.1.100*\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -e 'MEMCACHE_HOST=192.168.1.100' -e 'MEMCACHE_PORT=11211' \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n### Linking to Memcached Container\r\n\r\nAlternately you can link this image with a memcached container. The alias of the memcached server container should be set to **memcached** while linking with the redmine image.\r\n\r\nTo illustrate linking with a memcached container, we will use the [dockerimages/memcached](https://github.com/dockerimages/docker-memcached) image. Please refer the [README](https://github.com/dockerimages/docker-memcached/blob/master/README.md) of docker-memcached for details.\r\n\r\nFirst, lets pull and launch the memcached image from the docker index.\r\n\r\n```bash\r\ndocker run --name=memcached -d dockerimages/memcached:latest\r\n```\r\n\r\nNow you can link memcached to the redmine image:\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm --link memcached:memcached \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n### Mail\r\n\r\nThe mail configuration should be specified using environment variables while starting the redmine image. The configuration defaults to using gmail to send emails and requires the specification of a valid username and password to login to the gmail servers.\r\n\r\nThe following environment variables need to be specified to get mail support to work.\r\n\r\n* SMTP_ENABLED (defaults to `true` if `SMTP_USER` is defined, else defaults to `false`)\r\n* SMTP_DOMAIN (defaults to `www.gmail.com`)\r\n* SMTP_HOST (defaults to `smtp.gmail.com`)\r\n* SMTP_PORT (defaults to `587`)\r\n* SMTP_USER\r\n* SMTP_PASS\r\n* SMTP_STARTTLS (defaults to `true`)\r\n* SMTP_AUTHENTICATION (defaults to `:login` if `SMTP_USER` is set)\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  -v /opt/redmine/data:/home/redmine/data dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nIf you are not using google mail, then please configure the SMTP host and port using the `SMTP_HOST` and `SMTP_PORT` configuration parameters.\r\n\r\n__NOTE:__\r\n\r\nI have only tested standard gmail and google apps login. I expect that the currently provided configuration parameters should be sufficient for most users. If this is not the case, then please let me know.\r\n\r\n### SSL\r\n\r\nAccess to the redmine application can be secured using SSL so as to prevent unauthorized access. While a CA certified SSL certificate allows for verification of trust via the CA, a self signed certificates can also provide an equal level of trust verification as long as each client takes some additional steps to verify the identity of your website. I will provide instructions on achieving this towards the end of this section.\r\n\r\nTo secure your application via SSL you basically need two things:\r\n- **Private key (.key)**\r\n- **SSL certificate (.crt)**\r\n\r\nWhen using CA certified certificates, these files are provided to you by the CA. When using self-signed certificates you need to generate these files yourself. Skip the following section if you are armed with CA certified SSL certificates.\r\n\r\nJump to the [Using HTTPS with a load balancer](#using-https-with-a-load-balancer) section if you are using a load balancer such as hipache, haproxy or nginx.\r\n\r\n#### Generation of Self Signed Certificates\r\n\r\nGeneration of self-signed SSL certificates involves a simple 3 step procedure.\r\n\r\n**STEP 1**: Create the server private key\r\n\r\n```bash\r\nopenssl genrsa -out redmine.key 2048\r\n```\r\n\r\n**STEP 2**: Create the certificate signing request (CSR)\r\n\r\n```bash\r\nopenssl req -new -key redmine.key -out redmine.csr\r\n```\r\n\r\n**STEP 3**: Sign the certificate using the private key and CSR\r\n\r\n```bash\r\nopenssl x509 -req -days 365 -in redmine.csr -signkey redmine.key -out redmine.crt\r\n```\r\n\r\nCongratulations! you have now generated an SSL certificate thats valid for 365 days.\r\n\r\n#### Strengthening the server security\r\n\r\nThis section provides you with instructions to [strengthen your server security](https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html). To achieve this we need to generate stronger DHE parameters.\r\n\r\n```bash\r\nopenssl dhparam -out dhparam.pem 2048\r\n```\r\n\r\n#### Installation of the SSL Certificates\r\n\r\nOut of the four files generated above, we need to install the `redmine.key`, `redmine.crt` and `dhparam.pem` files at the redmine server. The CSR file is not needed, but do make sure you safely backup the file (in case you ever need it again).\r\n\r\nThe default path that the redmine application is configured to look for the SSL certificates is at `/home/redmine/data/certs`, this can however be changed using the `SSL_KEY_PATH`, `SSL_CERTIFICATE_PATH` and `SSL_DHPARAM_PATH` configuration options.\r\n\r\nIf you remember from above, the `/home/redmine/data` path is the path of the [data store](#data-store), which means that we have to create a folder named certs inside `/opt/redmine/data/` and copy the files into it and as a measure of security we will update the permission on the `redmine.key` file to only be readable by the owner.\r\n\r\n```bash\r\nmkdir -p /opt/redmine/data/certs\r\ncp redmine.key /opt/redmine/data/certs/\r\ncp redmine.crt /opt/redmine/data/certs/\r\ncp dhparam.pem /opt/redmine/data/certs/\r\nchmod 400 /opt/redmine/data/certs/redmine.key\r\n```\r\n\r\nGreat! we are now just one step away from having our application secured.\r\n\r\n#### Enabling HTTPS support\r\n\r\nHTTPS support can be enabled by setting the `REDMINE_HTTPS` option to `true`.\r\n\r\n```bash\r\ndocker run --name=redmine -d \\\r\n  -e 'REDMINE_HTTPS=true' \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nIn this configuration, any requests made over the plain http protocol will automatically be redirected to use the https protocol. However, this is not optimal when using a load balancer.\r\n\r\n#### Using HTTPS with a load balancer\r\n\r\nLoad balancers like nginx/haproxy/hipache talk to backend applications over plain http and as such the installation of ssl keys and certificates are not required and should **NOT** be installed in the container. The SSL configuration has to instead be done at the load balancer. Hoewever, when using a load balancer you **MUST** set `REDMINE_HTTPS` to `true`.\r\n\r\nWith this in place, you should configure the load balancer to support handling of https requests. But that is out of the scope of this document. Please refer to [Using SSL/HTTPS with HAProxy](http://seanmcgary.com/posts/using-sslhttps-with-haproxy) for information on the subject.\r\n\r\nWhen using a load balancer, you probably want to make sure the load balancer performs the automatic http to https redirection. Information on this can also be found in the link above.\r\n\r\nIn summation, when using a load balancer, the docker command would look for the most part something like this:\r\n\r\n```bash\r\ndocker run --name=redmine -d -p 10080:80 \\\r\n  -e 'REDMINE_HTTPS=true' \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n### Deploy to a subdirectory (relative url root)\r\n\r\nBy default redmine expects that your application is running at the root (eg. /). This section explains how to run your application inside a directory.\r\n\r\nLet's assume we want to deploy our application to '/redmine'. Redmine needs to know this directory to generate the appropriate routes. This can be specified using the `REDMINE_RELATIVE_URL_ROOT` configuration option like so:\r\n\r\n```bash\r\ndocker run --name=redmine -d -p 10080:80 \\\r\n  -e 'REDMINE_RELATIVE_URL_ROOT=/redmine' \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nRedmine will now be accessible at the `/redmine` path, e.g. `http://www.example.com/redmine`.\r\n\r\n**Note**: *The `REDMINE_RELATIVE_URL_ROOT` parameter should always begin with a slash and **SHOULD NOT** have any trailing slashes.*\r\n\r\n### Putting it all together\r\n\r\n```bash\r\ndocker run --name=redmine -d -h redmine.local.host \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  -v /opt/redmine/mysql:/var/lib/mysql \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\nIf you are using an external mysql database\r\n\r\n```bash\r\ndocker run --name=redmine -d -h redmine.local.host \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=redmine_production\" -e \"DB_USER=redmine\" -e \"DB_PASS=password\" \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n### Available Configuration Parameters\r\n\r\n*Please refer the docker run command options for the `--env-file` flag where you can specify all required environment variables in a single file. This will save you from writing a potentially long docker run command.*\r\n\r\nBelow is the complete list of parameters that can be set using environment variables.\r\n\r\n- **REDMINE_HTTPS**: Enable HTTPS (SSL/TLS) port on server. Defaults to `false`.\r\n- **REDMINE_PORT**: The port of the Redmine server. Defaults to `80` for plain http and `443` when https is enabled.\r\n- **REDMINE_RELATIVE_URL_ROOT**: The relative url of the Redmine server, e.g. `/redmine`. No default.\r\n- **REDMINE_FETCH_COMMITS**: Setup cron job to fetch commits. Possible values `disable`, `hourly`, `daily` or `monthly`. Disabled by default.\r\n- **DB_TYPE**: The database type. Possible values: `mysql`, `postgres`. Defaults to `mysql`.\r\n- **DB_HOST**: The database server hostname. Defaults to `localhost`.\r\n- **DB_PORT**: The database server port. Defaults to `3306`.\r\n- **DB_NAME**: The database name. Defaults to `redmine_production`\r\n- **DB_USER**: The database user. Defaults to `root`\r\n- **DB_PASS**: The database password. Defaults to no password\r\n- **DB_POOL**: The database connection pool count. Defaults to `5`.\r\n- **NGINX_MAX_UPLOAD_SIZE**: Maximum acceptable upload size. Defaults to `20m`.\r\n- **NGINX_X_FORWARDED_PROTO**: Advanced configuration option for the `proxy_set_header X-Forwarded-Proto` setting in the redmine nginx vHost configuration. Defaults to `https` when `REDMINE_HTTPS` is `true`, else defaults to `$scheme`.\r\n- **UNICORN_WORKERS**: The number of unicorn workers to start. Defaults to `2`.\r\n- **UNICORN_TIMEOUT**: Sets the timeout of unicorn worker processes. Defaults to `60` seconds.\r\n- **MEMCACHE_HOST**: The host name of the memcached server. No defaults.\r\n- **MEMCACHE_PORT**: The connection port of the memcached server. Defaults to `11211`.\r\n- **SSL_CERTIFICATE_PATH**: The path to the SSL certificate to use. Defaults to `/app/setup/certs/redmine.crt`.\r\n- **SSL_KEY_PATH**: The path to the SSL certificate's private key. Defaults to `/app/setup/certs/redmine.key`.\r\n- **SSL_DHPARAM_PATH**: The path to the Diffie-Hellman parameter. Defaults to `/app/setup/certs/dhparam.pem`.\r\n- **SMTP_ENABLED**: Enable mail delivery via SMTP. Defaults to `true` if `SMTP_USER` is defined, else defaults to `false`.\r\n- **SMTP_DOMAIN**: SMTP domain. Defaults to `www.gmail.com`\r\n- **SMTP_HOST**: SMTP server host. Defaults to `smtp.gmail.com`\r\n- **SMTP_PORT**: SMTP server port. Defaults to `587`.\r\n- **SMTP_USER**: SMTP username.\r\n- **SMTP_PASS**: SMTP password.\r\n- **SMTP_STARTTLS**: Enable STARTTLS. Defaults to `true`.\r\n- **SMTP_AUTHENTICATION**: Specify the SMTP authentication method. Defaults to `:login` if `SMTP_USER` is set.\r\n\r\n# Plugins\r\n\r\nThe functionality of redmine can be extended using plugins developed by the community. You can find a list of available plugins in the [Redmine Plugins Directory](http://www.redmine.org/plugins). You can also [search](https://github.com/search?type=Repositories&language=&q=redmine&repo=&langOverride=&x=0&y=0&start_value=1) for plugins on github.\r\n\r\n*Please check the plugin compatibility with the redmine version before installing a plugin.*\r\n\r\n## Installing Plugins\r\n\r\nPlugins should be installed in the `plugins` directory at the [data store](#data-store). If you are following the readme verbatim, on the host this location would be `/opt/redmine/data/plugins`.\r\n\r\n```bash\r\nmkdir -p /opt/redmine/data/plugins\r\n```\r\n\r\nTo install a plugin, simply copy the plugin assets to the `plugins` directory. For example, to install the [recurring tasks](https://github.com/nutso/redmine-plugin-recurring-tasks) plugin:\r\n\r\n```bash\r\ncd /opt/redmine/data/plugins\r\ngit clone https://github.com/nutso/redmine-plugin-recurring-tasks.git\r\n```\r\n\r\nFor most plugins this is all you need to do. With the plugin installed you can start the docker image normally. The image will detect that a plugin has been added (or removed) and automatically install the required gems and perform the plugin migrations and will be ready for use.\r\n\r\n***If the gem installation fails after adding a new plugin, please retry after removing the `/opt/redmine/data/tmp` directory***\r\n\r\nSome plugins however, require you to perform additional configurations to function correctly. You can add these steps in a `init` script at the `/opt/redmine/data/plugins` directory that will executed everytime the image is started.\r\n\r\nFor example, the recurring tasks plugin requires that you create a cron job to periodically execute a rake task. To achieve this, create the `/opt/redmine/data/plugins/init` file with the following content:\r\n\r\n```bash\r\n## Recurring Tasks Configuration\r\n# get the list existing cron jobs for the redmine user\r\nset +e\r\ncrontab -u redmine -l 2>/dev/null >/tmp/cron.redmine\r\nset -e\r\n\r\n# add new job for recurring tasks\r\necho '* */4 * * * cd /home/redmine/redmine && bundle exec rake redmine:recur_tasks RAILS_ENV=production >> log/cron_rake.log 2>&1' >>/tmp/cron.redmine\r\n\r\n# install the new jobs\r\ncrontab -u redmine /tmp/cron.redmine 2>/dev/null\r\n\r\n# remove the temporary file\r\nrm -rf /tmp/cron.redmine\r\n\r\n## End of Recurring Tasks Configuration\r\n```\r\n\r\nNow whenever the image is started the above init script will be executed and the required cron job will be installed.\r\n\r\nPreviously this image packaged a couple of plugins by default. Existing users would notice that those plugins are no longer available. If you want them back, follow these instructions:\r\n\r\n```bash\r\ncd /opt/redmine/data/plugins\r\nwget http://goo.gl/iJcvCP -O - | sh\r\n```\r\n\r\n*Please Note: this [plugin install script](https://gist.github.com/dockerimages/dd24dfdd13bc472d11a5) is not maintained and you would need to fix it if required (especially broken links)*\r\n\r\n## Uninstalling Plugins\r\n\r\nTo uninstall plugins you need to first tell redmine about the plugin you need to uninstall. This is done via a rake task:\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2 \\\r\n  app:rake redmine:plugins:migrate NAME=plugin_name VERSION=0\r\n```\r\n\r\nOnce the rake task has been executed, the plugin should be removed from the `/opt/redmine/data/plugins/` directory.\r\n\r\n```bash\r\nrm -rf /opt/redmine/data/plugins/plugin_name\r\n```\r\n\r\nAny configuration that you may have added in the `/opt/redmine/data/plugins/init` script for the plugin should also be removed.\r\n\r\nFor example, to remove the recurring tasks plugin:\r\n\r\n```bash\r\ndocker run --name=redmine -it --rm \\\r\n  -v /opt/redmine/data:/home/redmine/data \\\r\n  dockerimages/redmine:2.5.2-2 \\\r\n  app:rake redmine:plugins:migrate NAME=recurring_tasks VERSION=0\r\nrm -rf /opt/redmine/data/plugins/recurring_tasks\r\n```\r\n\r\nNow when the image is started the plugin will be gone.\r\n\r\n# Themes\r\n\r\nJust like plugins, redmine allows users to install additional themes. You can find a list of available plugins in the [Redmine Themes Directory](www.redmine.org/projects/redmine/wiki/Theme_List)\r\n\r\n## Installing Themes\r\n\r\nThemes should be installed in the `themes` directory at the [data store](#data-store). If you are following the readme verbatim, on the host this location would be `/opt/redmine/data/themes`.\r\n\r\n```bash\r\nmkdir -p /opt/redmine/data/themes\r\n```\r\n\r\nTo install a theme, simply copy the theme assets to the `themes` directory. For example, to install the [gitmike](https://github.com/makotokw/redmine-theme-gitmike) theme:\r\n\r\n```bash\r\ncd /opt/redmine/data/themes\r\ngit clone https://github.com/makotokw/redmine-theme-gitmike.git gitmike\r\n```\r\n\r\nWith the theme installed you can start the docker image normally and the newly installed theme should be available for use.\r\n\r\nPreviously this image packaged a couple of themes by default. Existing users would notice that those themes are no longer available. If you want them back, follow these instructions:\r\n\r\n```bash\r\ncd /opt/redmine/data/themes\r\nwget http://goo.gl/deKDpp -O - | sh\r\n```\r\n\r\n*Please Note: this [theme install script](https://gist.github.com/dockerimages/aaa1b7bb064703c1e23c) is not maintained and you would need to fix it if required (especially broken links)*\r\n\r\n## Uninstalling Themes\r\n\r\nTo uninstall plugins you simply need to remove the theme from the `/opt/redmine/data/themes/` directory and restart the image.\r\n\r\n```bash\r\nrm -rf /opt/redmine/data/themes/theme_name\r\n```\r\n\r\nFor example, to remove the gitmike theme:\r\n\r\n```bash\r\nrm -rf /opt/redmine/data/themes/gitmike\r\n```\r\n\r\nNow when the image is started the theme will be not be available anymore.\r\n\r\n# Shell Access\r\n\r\nFor debugging and maintenance purposes you may want access the container shell. Since the container does not include a SSH server, you can use the [nsenter](http://man7.org/linux/man-pages/man1/nsenter.1.html) linux tool (part of the util-linux package) to access the container shell.\r\n\r\nSome linux distros (e.g. ubuntu) use older versions of the util-linux which do not include the `nsenter` tool. To get around this @jpetazzo has created a nice docker image that allows you to install the `nsenter` utility and a helper script named `docker-enter` on these distros.\r\n\r\nTo install the nsenter tool on your host execute the following command.\r\n\r\n```bash\r\ndocker run --rm -v /usr/local/bin:/target dockerimages/nsenter\r\n```\r\n\r\nNow you can access the container shell using the command\r\n\r\n```bash\r\nsudo docker-enter redmine\r\n```\r\n\r\nFor more information refer https://github.com/dockerimages/nsenter\r\n\r\nAnother tool named `nsinit` can also be used for the same purpose. Please refer https://jpetazzo.github.io/2014/03/23/lxc-attach-nsinit-nsenter-docker-0-9/ for more information.\r\n\r\n# Upgrading\r\n\r\nTo upgrade to newer redmine releases, simply follow this 4 step upgrade procedure.\r\n\r\n**Step 1**: Update the docker image.\r\n\r\n```bash\r\ndocker pull dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n**Step 2**: Stop and remove the currently running image\r\n\r\n```bash\r\ndocker stop redmine\r\ndocker rm redmine\r\n```\r\n\r\n**Step 3**: Backup the database in case something goes wrong.\r\n\r\n```bash\r\nmysqldump -h <mysql-server-ip> -uredmine -p --add-drop-table redmine_production > redmine.sql\r\n```\r\n\r\n**Step 4**: Start the image\r\n\r\n```bash\r\ndocker run --name=redmine -d [OPTIONS] dockerimages/redmine:2.5.2-2\r\n```\r\n\r\n## Rake Tasks\r\n\r\nThe `app:rake` command allows you to run redmine rake tasks. To run a rake task simply specify the task to be executed to the `app:rake` command. For example, if you want to send a test email to the admin user.\r\n\r\n```bash\r\ndocker run --name=redmine -d [OPTIONS] \\\r\n  dockerimages/redmine:2.5.2-2 app:rake redmine:email:test[admin]\r\n```\r\n\r\nSimilarly, to remove uploaded files left unattached\r\n\r\n```bash\r\ndocker run --name=gitlab -d [OPTIONS] \\\r\n  dockerimages/gitlab:7.2.1 app:rake redmine:attachments:prune\r\n```\r\n\r\nFor a complete list of available rake tasks please refer www.redmine.org/projects/redmine/wiki/RedmineRake.\r\n\r\n## References\r\n  * http://www.redmine.org/\r\n  * http://www.redmine.org/projects/redmine/wiki/Guide\r\n  * http://www.redmine.org/projects/redmine/wiki/RedmineInstall\r\n","google":"UA-48810494-3","note":"Don't delete this file! It's used internally to help with page regeneration."}